{"version":3,"file":"static\\development\\pages\\post.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/post.tsx","webpack:///./src/components/comments.tsx","webpack:///./src/components/goback.tsx","webpack:///./src/components/postView.tsx","webpack:///./src/models/store.ts","webpack:///./src/utils/fetcher.ts","webpack:///./src/utils/rehydrateStore.ts","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"mobx-react\"","webpack:///external \"mobx-state-tree\"","webpack:///external \"next/link\"","webpack:///external \"node-fetch\"","webpack:///external \"react\"","webpack:///external \"react-helmet\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import React, { Fragment } from \"react\";\r\nimport { Provider } from \"mobx-react\";\r\nimport { rehydrateStore, initStore } from \"../src/utils/rehydrateStore\";\r\nimport Comments from \"../src/components/comments\";\r\nimport { getPostComments, getPostById } from \"../src/utils/fetcher\";\r\nimport { Goback } from \"../src/components/goback\";\r\nimport Helmet from \"react-helmet\";\r\n\r\ninterface Props {\r\n  initialState: any;\r\n  isServer: boolean;\r\n  postId: string;\r\n}\r\n\r\nexport default class PostPage extends React.Component<Props> {\r\n  store: any;\r\n\r\n  static async getInitialProps({ req, query }) {\r\n    const postId = query.id;\r\n    const post = await getPostById(postId);\r\n    const comments = await getPostComments(postId);\r\n    post.comments = comments;\r\n\r\n    const init = await initStore(!!req, { posts: [post] });\r\n\r\n    if (req) {\r\n      Helmet.renderStatic();\r\n    }\r\n\r\n    return {\r\n      initialState: init.initialState,\r\n      postId,\r\n      title: post.title,\r\n      desc: post.body\r\n    };\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.store = rehydrateStore(this.props.initialState);\r\n  }\r\n\r\n  render() {\r\n    const { postId, title, desc } = this.props;\r\n\r\n    return (\r\n      <Provider store={this.store}>\r\n        <Fragment>\r\n          <Helmet\r\n            meta={[\r\n              { property: \"og:title\", content: title },\r\n              { property: \"og:description\", content: desc }\r\n            ]}\r\n          />\r\n          <Goback text=\"Go back to all Posts\" linkPath=\"/posts\" />\r\n          <Comments postId={postId} />\r\n        </Fragment>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\nimport { PostView } from \"./postView\";\r\n\r\ninterface Props {\r\n  postId: string;\r\n  store?: any;\r\n}\r\n\r\nclass Comments extends React.Component<Props> {\r\n  render() {\r\n    const { store, postId } = this.props;\r\n    const post = store.getPost(parseInt(postId));\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <PostView post={post} />\r\n        </div>\r\n        <ul>\r\n          {post.comments.map(comment => (\r\n            <li key={comment.id}>\r\n              <img src=\"http://tachyons.io/img/avatar-mrmrs.jpg\" />\r\n              <p>{comment.body}</p>\r\n              <div>\r\n                <span>{comment.email}</span>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default inject(\"store\")(observer(Comments));\r\n","import React from \"react\";\r\nimport Link from \"next/link\";\r\n\r\ninterface Props {\r\n  text: string;\r\n  linkPath: string;\r\n}\r\n\r\nexport const Goback = ({ text, linkPath }: Props) => (\r\n  <header>\r\n    <Link href={linkPath}>\r\n      <a>\r\n        <h2>{text}</h2>\r\n      </a>\r\n    </Link>\r\n  </header>\r\n);\r\n","import React from \"react\";\r\nimport Link from \"next/link\";\r\n\r\ninterface Props {\r\n  post: {\r\n    id: string;\r\n    title: string;\r\n    userId: string;\r\n    body: string;\r\n  };\r\n}\r\n\r\nexport const PostView = ({ post }: Props) => (\r\n  <article key={post.id}>\r\n    <Link href={{ pathname: \"/post\", query: { id: post.id } }}>\r\n      <div>\r\n        <div>\r\n          <img\r\n            src=\"https://picsum.photos/300/200/?random\"\r\n            width={300}\r\n            height={200}\r\n          />\r\n        </div>\r\n        <div>\r\n          <h1>{post.title}</h1>\r\n          <p>{post.body}</p>\r\n          <p>by user: {post.userId}</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  </article>\r\n);\r\n","import { types } from \"mobx-state-tree\";\r\nimport { type } from \"os\";\r\n\r\nconst Photo = types.model(\"Photo\", {\r\n  albumId: types.number,\r\n  id: types.number,\r\n  title: \"\",\r\n  url: \"\",\r\n  thumbnailUrl: \"\"\r\n});\r\n\r\nconst Album = types.model(\"Album\", {\r\n  id: types.number,\r\n  userId: types.number,\r\n  title: types.string,\r\n  photos: types.optional(types.array(Photo), [])\r\n});\r\n\r\nconst Comments = types.model(\"Comments\", {\r\n  postId: types.number,\r\n  id: types.number,\r\n  name: \"\",\r\n  email: \"\",\r\n  body: \"\"\r\n});\r\n\r\nconst Post = types.model(\"Post\", {\r\n  id: types.number,\r\n  userId: types.number,\r\n  title: types.string,\r\n  body: types.string,\r\n  comments: types.optional(types.array(Comments), [])\r\n});\r\n\r\nexport const albumStore = types\r\n  .model(\"store\", {\r\n    albums: types.optional(types.array(Album), []),\r\n    posts: types.optional(types.array(Post), []),\r\n    toggle: types.optional(types.boolean, false)\r\n  })\r\n  .actions(self => ({\r\n    toggler() {\r\n      self.toggle = !self.toggle;\r\n    },\r\n    sortAlbumsAlphabetically() {\r\n      return self.albums.sort((a, b) => {\r\n        if (a.title < b.title) return -1;\r\n        if (a.title > b.title) return 1;\r\n        return 0;\r\n      });\r\n    },\r\n    getPostByUserId(id: number) {\r\n      return self.posts.filter(({ userId }) => userId === id);\r\n    },\r\n    getAllPostUserIds() {\r\n      return self.posts\r\n        .map(({ userId }) => userId)\r\n        .filter((userId, pos, array) => {\r\n          const indexOf = array.indexOf(userId);\r\n          return indexOf === pos;\r\n        });\r\n    }\r\n  }))\r\n  .views(self => ({\r\n    getPost(postId: number) {\r\n      return self.posts.find(p => p.id === postId);\r\n    },\r\n    getAlbum(albumId: number) {\r\n      return self.albums.find(a => a.id === albumId);\r\n    }\r\n  }));\r\n\r\nexport const alStore = albumStore.create();\r\n","import fetch from \"node-fetch\";\r\n\r\nexport const fetcher = async (url: string) => {\r\n  try {\r\n    const res = await fetch(`https://jsonplaceholder.typicode.com/${url}`);\r\n    const json = await res.json();\r\n    return json;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport const getAlbums = () => fetcher(\"albums\");\r\nexport const getAlbumPhotos = (id: string) => fetcher(`albums/${id}/photos`);\r\nexport const getAlbumById = (id: string) => fetcher(`albums/${id}`);\r\n\r\nexport const getPosts = () => fetcher(`posts`);\r\nexport const getPostComments = (id: string) => fetcher(`posts/${id}/comments`);\r\nexport const getPostById = (id: string) => fetcher(`posts/${id}`);\r\n","import { applySnapshot, getSnapshot } from \"mobx-state-tree\";\r\nimport { alStore, albumStore } from \"../models/store\";\r\n\r\nexport const rehydrateStore = (initialState?: any) => {\r\n  initialState && applySnapshot(alStore, initialState);\r\n  return alStore;\r\n};\r\n\r\ninterface InitialState {\r\n  initialState: any;\r\n}\r\n\r\nlet store = null;\r\n\r\nexport const initStore = (\r\n  isServer: boolean,\r\n  response: any\r\n): InitialState | any => {\r\n  if (!isServer) {\r\n    console.log(\"response \", response);\r\n    applySnapshot(alStore, response);\r\n    return albumStore;\r\n  }\r\n\r\n  store = albumStore.create(response);\r\n\r\n  return {\r\n    initialState: getSnapshot(store)\r\n  };\r\n};\r\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"mobx-react\");","module.exports = require(\"mobx-state-tree\");","module.exports = require(\"next/link\");","module.exports = require(\"node-fetch\");","module.exports = require(\"react\");","module.exports = require(\"react-helmet\");"],"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","sourceRoot":""}